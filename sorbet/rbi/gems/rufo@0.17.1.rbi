# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rufo` gem.
# Please instead update this file by running `bin/tapioca gem rufo`.

# source://rufo//lib/rufo/erb_formatter.rb#4
class CustomScanner < ::ERB::Compiler::TrimScanner
  # @return [CustomScanner] a new instance of CustomScanner
  #
  # source://rufo//lib/rufo/erb_formatter.rb#5
  def initialize(src); end

  # source://rufo//lib/rufo/erb_formatter.rb#14
  def etags; end

  # source://rufo//lib/rufo/erb_formatter.rb#10
  def stags; end
end

# This file is based on https://github.com/ruby/rake/blob/master/lib/rake/file_list.rb
# Git commit: 5b8f8fc41a5d7d7d6a5d767e48464c60884d3aee
#
# source://rufo//lib/rufo.rb#3
module Rufo
  class << self
    # source://rufo//lib/rufo.rb#16
    def format(code, **options); end
  end
end

# source://rufo//lib/rufo.rb#4
class Rufo::Bug < ::StandardError; end

# source://rufo//lib/rufo/command.rb#5
class Rufo::Command
  # @return [Command] a new instance of Command
  #
  # source://rufo//lib/rufo/command.rb#15
  def initialize(want_check, exit_code, filename_for_dot_rufo, loglevel); end

  # source://rufo//lib/rufo/command.rb#23
  def exit_code(status_code); end

  # source://rufo//lib/rufo/command.rb#138
  def format(code, dir, erb: T.unsafe(nil)); end

  # source://rufo//lib/rufo/command.rb#66
  def format_args(args); end

  # source://rufo//lib/rufo/command.rb#100
  def format_file(filename); end

  # source://rufo//lib/rufo/command.rb#45
  def format_stdin; end

  # source://rufo//lib/rufo/command.rb#36
  def run(argv); end

  private

  # Returns the value of attribute logger.
  #
  # source://rufo//lib/rufo/command.rb#187
  def logger; end

  class << self
    # source://rufo//lib/rufo/command.rb#151
    def parse_options(argv); end

    # source://rufo//lib/rufo/command.rb#10
    def run(argv); end
  end
end

# source://rufo//lib/rufo/command.rb#8
Rufo::Command::CODE_CHANGE = T.let(T.unsafe(nil), Integer)

# source://rufo//lib/rufo/command.rb#7
Rufo::Command::CODE_ERROR = T.let(T.unsafe(nil), Integer)

# source://rufo//lib/rufo/command.rb#6
Rufo::Command::CODE_OK = T.let(T.unsafe(nil), Integer)

# source://rufo//lib/rufo/dot_file.rb#3
class Rufo::DotFile
  # @return [DotFile] a new instance of DotFile
  #
  # source://rufo//lib/rufo/dot_file.rb#4
  def initialize; end

  # source://rufo//lib/rufo/dot_file.rb#15
  def find_in(dir); end

  # source://rufo//lib/rufo/dot_file.rb#8
  def get_config_in(dir); end

  # source://rufo//lib/rufo/dot_file.rb#42
  def internal_find_in(dir); end

  # source://rufo//lib/rufo/dot_file.rb#21
  def parse(file_contents); end
end

# source://rufo//lib/rufo/erb_formatter.rb#19
class Rufo::ErbFormatter
  # @return [ErbFormatter] a new instance of ErbFormatter
  #
  # source://rufo//lib/rufo/erb_formatter.rb#26
  def initialize(code, **options); end

  # source://rufo//lib/rufo/erb_formatter.rb#34
  def format; end

  # Returns the value of attribute result.
  #
  # source://rufo//lib/rufo/erb_formatter.rb#24
  def result; end

  private

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/erb_formatter.rb#130
  def code_block_token?(token); end

  # Returns the value of attribute code_mode.
  #
  # source://rufo//lib/rufo/erb_formatter.rb#53
  def code_mode; end

  # Returns the value of attribute current_column.
  #
  # source://rufo//lib/rufo/erb_formatter.rb#54
  def current_column; end

  # Sets the attribute current_column
  #
  # @param value the value to set the attribute current_column to.
  #
  # source://rufo//lib/rufo/erb_formatter.rb#54
  def current_column=(_arg0); end

  # Returns the value of attribute current_lineno.
  #
  # source://rufo//lib/rufo/erb_formatter.rb#54
  def current_lineno; end

  # Sets the attribute current_lineno
  #
  # @param value the value to set the attribute current_lineno to.
  #
  # source://rufo//lib/rufo/erb_formatter.rb#54
  def current_lineno=(_arg0); end

  # source://rufo//lib/rufo/erb_formatter.rb#135
  def determine_code_wrappers(code_str); end

  # source://rufo//lib/rufo/erb_formatter.rb#176
  def disable_code_mode; end

  # source://rufo//lib/rufo/erb_formatter.rb#172
  def enable_code_mode; end

  # source://rufo//lib/rufo/erb_formatter.rb#107
  def format_affix(affix, levels, type); end

  # source://rufo//lib/rufo/erb_formatter.rb#168
  def format_code(str); end

  # source://rufo//lib/rufo/erb_formatter.rb#92
  def process_code(code_str); end

  # source://rufo//lib/rufo/erb_formatter.rb#72
  def process_erb; end

  # source://rufo//lib/rufo/erb_formatter.rb#162
  def raise_syntax_error!(code_str); end

  # Returns the value of attribute scanner.
  #
  # source://rufo//lib/rufo/erb_formatter.rb#53
  def scanner; end

  # source://rufo//lib/rufo/erb_formatter.rb#63
  def update_column(token); end

  # source://rufo//lib/rufo/erb_formatter.rb#56
  def update_lineno(token); end

  class << self
    # source://rufo//lib/rufo/erb_formatter.rb#20
    def format(code, **options); end
  end
end

# source://rufo//lib/rufo/erb_formatter.rb#128
Rufo::ErbFormatter::CODE_BLOCK_KEYWORDS = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/file_finder.rb#1
class Rufo::FileFinder
  include ::Enumerable

  # @return [FileFinder] a new instance of FileFinder
  #
  # source://rufo//lib/rufo/file_finder.rb#36
  def initialize(files_or_dirs, includes: T.unsafe(nil), excludes: T.unsafe(nil)); end

  # source://rufo//lib/rufo/file_finder.rb#42
  def each; end

  private

  # source://rufo//lib/rufo/file_finder.rb#56
  def all_rb_files(file_or_dir); end

  # source://rufo//lib/rufo/file_finder.rb#65
  def build_file_list; end

  # Returns the value of attribute excludes.
  #
  # source://rufo//lib/rufo/file_finder.rb#54
  def excludes; end

  # Returns the value of attribute files_or_dirs.
  #
  # source://rufo//lib/rufo/file_finder.rb#54
  def files_or_dirs; end

  # Returns the value of attribute includes.
  #
  # source://rufo//lib/rufo/file_finder.rb#54
  def includes; end
end

# source://rufo//lib/rufo/file_finder.rb#26
Rufo::FileFinder::DEFAULT_PATTERNS = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/file_finder.rb#31
Rufo::FileFinder::EXCLUDE_PATTERNS = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/file_finder.rb#17
Rufo::FileFinder::EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/file_finder.rb#12
Rufo::FileFinder::FILENAMES = T.let(T.unsafe(nil), Array)

# Taken from https://github.com/ruby/rake/blob/f0a897e3fb557f64f5da59785b1a4464826f77b2/lib/rake/application.rb#L41
#
# source://rufo//lib/rufo/file_finder.rb#5
Rufo::FileFinder::RAKEFILES = T.let(T.unsafe(nil), Array)

# A FileList is essentially an array with a few helper methods defined to
# make file manipulation a bit easier.
#
# FileLists are lazy.  When given a list of glob patterns for possible files
# to be included in the file list, instead of searching the file structures
# to find the files, a FileList holds the pattern for latter use.
#
# This allows us to define a number of FileList to match any number of
# files, but only search out the actual files when then FileList itself is
# actually used.  The key is that the first time an element of the
# FileList/Array is requested, the pending patterns are resolved into a real
# list of file names.
#
# source://rufo//lib/rufo/file_list.rb#22
class Rufo::FileList
  # Create a file list from the globbable patterns given.  If you wish to
  # perform multiple includes or excludes at object build time, use the
  # "yield self" pattern.
  #
  # Example:
  #   file_list = FileList.new('lib/**/*.rb', 'test/test*.rb')
  #
  #   pkg_files = FileList.new('lib/**/*') do |fl|
  #     fl.exclude(/\bCVS\b/)
  #   end
  #
  # @return [FileList] a new instance of FileList
  # @yield [_self]
  # @yieldparam _self [Rufo::FileList] the object that the method was called on
  #
  # source://rufo//lib/rufo/file_list.rb#97
  def initialize(*patterns); end

  # source://rufo//lib/rufo/file_list.rb#66
  def &(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def +(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def -(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#159
  def <<(obj); end

  # source://rufo//lib/rufo/file_list.rb#75
  def <=>(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def [](*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def []=(*args, &block); end

  # Add file names defined by glob patterns to the file list.  If an array
  # is given, add each element of the array.
  #
  # Example:
  #   file_list.include("*.java", "*.cfg")
  #   file_list.include %w( math.c lib.h *.o )
  #
  # source://rufo//lib/rufo/file_list.rb#114
  def add(*filenames); end

  # source://rufo//lib/rufo/file_list.rb#75
  def all?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def any?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def append(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def assoc(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def at(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def bsearch(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def bsearch_index(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def chain(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def chunk(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def chunk_while(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def clear(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def collect(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def collect!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def collect_concat(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def combination(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def compact(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def compact!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def compact_blank(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def compact_blank!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def concat(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def count(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def cycle(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def deconstruct(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def delete(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def delete_at(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def delete_if(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def detect(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def difference(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def dig(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def drop(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def drop_while(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def each(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def each_cons(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def each_entry(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def each_index(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def each_slice(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def each_with_index(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def each_with_object(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def empty?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def entries(*args, &block); end

  # Register a list of file name patterns that should be excluded from the
  # list.  Patterns may be regular expressions, glob patterns or regular
  # strings.  In addition, a block given to exclude will remove entries that
  # return true when given to the block.
  #
  # Note that glob patterns are expanded against the file system. If a file
  # is explicitly added to a file list, but does not exist in the file
  # system, then an glob pattern in the exclude list will not exclude the
  # file.
  #
  # Examples:
  #   FileList['a.c', 'b.c'].exclude("a.c") => ['b.c']
  #   FileList['a.c', 'b.c'].exclude(/^a/)  => ['b.c']
  #
  # If "a.c" is a file, then ...
  #   FileList['a.c', 'b.c'].exclude("a.*") => ['b.c']
  #
  # If "a.c" is not a file, then ...
  #   FileList['a.c', 'b.c'].exclude("a.*") => ['a.c', 'b.c']
  #
  # source://rufo//lib/rufo/file_list.rb#144
  def exclude(*patterns, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def exclude?(*args, &block); end

  # Should the given file name be excluded from the list?
  #
  # @return [Boolean]
  #
  # source://rufo//lib/rufo/file_list.rb#209
  def excluded_from_list?(filename); end

  # source://rufo//lib/rufo/file_list.rb#75
  def excluding(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def extract!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def extract_options!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def fetch(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def fifth(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def fill(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def filter(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def filter!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def filter_map(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def find(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def find_all(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def find_index(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def first(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def flat_map(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def flatten(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def flatten!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def forty_two(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def fourth(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def from(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def grep(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def grep_v(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def group_by(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def in_groups(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def in_groups_of(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def in_order_of(*args, &block); end

  # Add file names defined by glob patterns to the file list.  If an array
  # is given, add each element of the array.
  #
  # Example:
  #   file_list.include("*.java", "*.cfg")
  #   file_list.include %w( math.c lib.h *.o )
  #
  # source://rufo//lib/rufo/file_list.rb#114
  def include(*filenames); end

  # source://rufo//lib/rufo/file_list.rb#75
  def include?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def including(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def index(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def index_by(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def index_with(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def inject(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def inquiry(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def insert(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def inspect(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def intersect?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def intersection(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def join(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def keep_if(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def last(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def lazy(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def length(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def many?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def map(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def map!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def max(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def max_by(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def maximum(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def member?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def min(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def min_by(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def minimum(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def minmax(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def minmax_by(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def none?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def one?(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def pack(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def permutation(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def pick(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def place(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def pluck(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def pop(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def prepend(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def product(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def push(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def rassoc(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def reduce(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def reject(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def reject!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def repeated_combination(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def repeated_permutation(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def replace(*args, &block); end

  # Resolve all the pending adds now.
  #
  # source://rufo//lib/rufo/file_list.rb#166
  def resolve; end

  # source://rufo//lib/rufo/file_list.rb#75
  def reverse(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def reverse!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def reverse_each(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def rindex(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def rotate(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def rotate!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def sample(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def second(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def second_to_last(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def select(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def select!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def shelljoin(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def shift(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def shuffle(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def shuffle!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def size(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def slice(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def slice!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def slice_after(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def slice_before(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def slice_when(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def sole(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def sort(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def sort!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def sort_by(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def sort_by!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def split(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def sum(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def take(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def take_while(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def tally(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def third(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def third_to_last(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def to(*args, &block); end

  # Return the internal array object.
  #
  # source://rufo//lib/rufo/file_list.rb#154
  def to_a; end

  # source://rufo//lib/rufo/file_list.rb#75
  def to_default_s(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def to_formatted_s(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def to_fs(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def to_h(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def to_msgpack(*args, &block); end

  # Convert a FileList to a string by joining all elements with a space.
  #
  # source://rufo//lib/rufo/file_list.rb#194
  def to_s; end

  # source://rufo//lib/rufo/file_list.rb#75
  def to_sentence(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def to_set(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def to_xml(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def transpose(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def union(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def uniq(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def uniq!(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def unshift(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def values_at(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def without(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#75
  def zip(*args, &block); end

  # source://rufo//lib/rufo/file_list.rb#66
  def |(*args, &block); end

  private

  # Add matching glob patterns.
  #
  # source://rufo//lib/rufo/file_list.rb#200
  def add_matching(pattern); end

  # source://rufo//lib/rufo/file_list.rb#176
  def resolve_add(filename); end

  # source://rufo//lib/rufo/file_list.rb#187
  def resolve_exclude; end

  class << self
    # Get a sorted list of files matching the pattern. This method
    # should be preferred to Dir[pattern] and Dir.glob(pattern) because
    # the files returned are guaranteed to be sorted.
    #
    # source://rufo//lib/rufo/file_list.rb#239
    def glob(pattern, *args); end
  end
end

# List of array methods (that are not in +Object+) that need to be
# delegated.
#
# source://rufo//lib/rufo/file_list.rb#42
Rufo::FileList::ARRAY_METHODS = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/file_list.rb#225
Rufo::FileList::DEFAULT_IGNORE_PATTERNS = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/file_list.rb#231
Rufo::FileList::DEFAULT_IGNORE_PROCS = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/file_list.rb#59
Rufo::FileList::DELEGATING_METHODS = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/file_list.rb#84
Rufo::FileList::GLOB_PATTERN = T.let(T.unsafe(nil), Regexp)

# List of additional methods that must be delegated.
#
# source://rufo//lib/rufo/file_list.rb#45
Rufo::FileList::MUST_DEFINE = T.let(T.unsafe(nil), Array)

# List of methods that should not be delegated here (we define special
# versions of them explicitly below).
#
# source://rufo//lib/rufo/file_list.rb#49
Rufo::FileList::MUST_NOT_DEFINE = T.let(T.unsafe(nil), Array)

# List of delegated methods that return new array values which need
# wrapping.
#
# source://rufo//lib/rufo/file_list.rb#53
Rufo::FileList::SPECIAL_RETURN = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/formatter.rb#3
class Rufo::Formatter
  include ::Rufo::Settings

  # @return [Formatter] a new instance of Formatter
  #
  # source://rufo//lib/rufo/formatter.rb#16
  def initialize(code, **options); end

  # source://rufo//lib/rufo/formatter.rb#4126
  def adjust_other_alignments(scope, line, column, offset); end

  # @raise [Rufo::Bug]
  #
  # source://rufo//lib/rufo/formatter.rb#3871
  def bug(msg); end

  # source://rufo//lib/rufo/formatter.rb#3773
  def capture_output; end

  # source://rufo//lib/rufo/formatter.rb#3865
  def check(kind); end

  # source://rufo//lib/rufo/formatter.rb#2837
  def check_heredocs_in_literal_elements(is_last, wrote_comma); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3914
  def comma?; end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3906
  def comment?; end

  # source://rufo//lib/rufo/formatter.rb#1408
  def consume_block_args(args); end

  # source://rufo//lib/rufo/formatter.rb#1025
  def consume_call_dot; end

  # source://rufo//lib/rufo/formatter.rb#3638
  def consume_embedded_comment; end

  # source://rufo//lib/rufo/formatter.rb#3651
  def consume_end; end

  # Consume and print an end of line, handling semicolons and comments
  #
  # - at_prefix: are we at a point before an expression? (if so, we don't need a space before the first comment)
  # - want_semicolon: do we want do print a semicolon to separate expressions?
  # - want_multiline: do we want multiple lines to appear, or at most one?
  #
  # source://rufo//lib/rufo/formatter.rb#3465
  def consume_end_of_line(at_prefix: T.unsafe(nil), want_semicolon: T.unsafe(nil), want_multiline: T.unsafe(nil), needs_two_lines_on_comment: T.unsafe(nil), first_space: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#3442
  def consume_keyword(value); end

  # source://rufo//lib/rufo/formatter.rb#3451
  def consume_op(value); end

  # source://rufo//lib/rufo/formatter.rb#1894
  def consume_op_or_keyword; end

  # source://rufo//lib/rufo/formatter.rb#3666
  def consume_pin_op; end

  # source://rufo//lib/rufo/formatter.rb#3315
  def consume_space(want_preserve_whitespace: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#1237
  def consume_space_after_command_name; end

  # source://rufo//lib/rufo/formatter.rb#3326
  def consume_space_or_newline; end

  # source://rufo//lib/rufo/formatter.rb#3423
  def consume_token(kind); end

  # source://rufo//lib/rufo/formatter.rb#3429
  def consume_token_value(value); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#905
  def current_comment_aligned_to_previous_one?; end

  # [[1, 0], :on_int, "1"]
  #
  # source://rufo//lib/rufo/formatter.rb#3876
  def current_token; end

  # source://rufo//lib/rufo/formatter.rb#3894
  def current_token_column; end

  # source://rufo//lib/rufo/formatter.rb#3880
  def current_token_kind; end

  # source://rufo//lib/rufo/formatter.rb#3890
  def current_token_line; end

  # source://rufo//lib/rufo/formatter.rb#3885
  def current_token_value; end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#571
  def declaration?(exp); end

  # source://rufo//lib/rufo/formatter.rb#4016
  def dedent_calls; end

  # source://rufo//lib/rufo/formatter.rb#4077
  def do_align(components, scope); end

  # source://rufo//lib/rufo/formatter.rb#4073
  def do_align_case_when; end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3417
  def empty_body?(body); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#2069
  def empty_params?(node); end

  # source://rufo//lib/rufo/formatter.rb#3930
  def find_closing_brace_token; end

  # source://rufo//lib/rufo/formatter.rb#1175
  def flush_heredocs; end

  # source://rufo//lib/rufo/formatter.rb#176
  def format; end

  # source://rufo//lib/rufo/formatter.rb#2062
  def format_endless_method; end

  # source://rufo//lib/rufo/formatter.rb#647
  def format_simple_string(node); end

  # source://rufo//lib/rufo/formatter.rb#3673
  def indent(value = T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#3826
  def indent_after_space(node, sticky: T.unsafe(nil), want_space: T.unsafe(nil), needed_indent: T.unsafe(nil), token_column: T.unsafe(nil), base_column: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#3686
  def indent_body(exps, force_multiline: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#4050
  def indent_literals; end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3898
  def keyword?(keyword); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3975
  def last?(index, array); end

  # source://rufo//lib/rufo/formatter.rb#3763
  def maybe_indent(toggle, indent_size); end

  # Check to see if need to add space inside hash literal braces.
  #
  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#4157
  def need_space_for_hash?(node, elements, closing_brace_token); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#552
  def needs_two_lines?(exp); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3902
  def newline?; end

  # source://rufo//lib/rufo/formatter.rb#3861
  def next_indent; end

  # source://rufo//lib/rufo/formatter.rb#3948
  def next_token; end

  # source://rufo//lib/rufo/formatter.rb#3971
  def next_token_no_heredoc_check; end

  # source://rufo//lib/rufo/formatter.rb#4166
  def node_line(node, beginning: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3922
  def op?(value); end

  # source://rufo//lib/rufo/formatter.rb#3979
  def push_call(node); end

  # source://rufo//lib/rufo/formatter.rb#3998
  def push_hash(node); end

  # source://rufo//lib/rufo/formatter.rb#3989
  def push_node(node); end

  # source://rufo//lib/rufo/formatter.rb#4005
  def push_type(node); end

  # Which quote character are we using?
  #
  # source://rufo//lib/rufo/formatter.rb#629
  def quote_char; end

  # source://rufo//lib/rufo/formatter.rb#4138
  def remove_lines_before_inline_declarations; end

  # source://rufo//lib/rufo/formatter.rb#4152
  def result; end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3910
  def semicolon?; end

  # should we format this string according to :quote_style?
  #
  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#634
  def should_format_string?(string); end

  # For simple string formatting, look for nodes like:
  #  [:string_literal, [:string_content, [:@tstring_content, "abc", [...]]]]
  # and return the simple string inside.
  #
  # source://rufo//lib/rufo/formatter.rb#618
  def simple_string(node); end

  # source://rufo//lib/rufo/formatter.rb#3342
  def skip_ignored_space; end

  # source://rufo//lib/rufo/formatter.rb#3411
  def skip_semicolons; end

  # source://rufo//lib/rufo/formatter.rb#3336
  def skip_space; end

  # source://rufo//lib/rufo/formatter.rb#3354
  def skip_space_backslash; end

  # source://rufo//lib/rufo/formatter.rb#3346
  def skip_space_no_heredoc_check; end

  # source://rufo//lib/rufo/formatter.rb#3366
  def skip_space_or_newline(_want_semicolon: T.unsafe(nil), write_first_semicolon: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#3802
  def skip_space_or_newline_using_setting(setting, indent_size = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3918
  def space?; end

  # source://rufo//lib/rufo/formatter.rb#4012
  def to_ary(node); end

  # source://rufo//lib/rufo/formatter.rb#928
  def track_alignment(key, target, offset = T.unsafe(nil), id = T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#920
  def track_assignment(offset = T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#924
  def track_case_when; end

  # source://rufo//lib/rufo/formatter.rb#911
  def track_comment(id: T.unsafe(nil), match_previous_id: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#190
  def visit(node); end

  # source://rufo//lib/rufo/formatter.rb#2691
  def visit_alias(node); end

  # source://rufo//lib/rufo/formatter.rb#1499
  def visit_args_add_star(node); end

  # source://rufo//lib/rufo/formatter.rb#2199
  def visit_array(node); end

  # source://rufo//lib/rufo/formatter.rb#2430
  def visit_array_access(node); end

  # source://rufo//lib/rufo/formatter.rb#2449
  def visit_array_getter_or_setter(name, args); end

  # source://rufo//lib/rufo/formatter.rb#3081
  def visit_array_pattern(node); end

  # source://rufo//lib/rufo/formatter.rb#2439
  def visit_array_setter(node); end

  # source://rufo//lib/rufo/formatter.rb#815
  def visit_assign(node); end

  # source://rufo//lib/rufo/formatter.rb#881
  def visit_assign_value(value); end

  # source://rufo//lib/rufo/formatter.rb#1537
  def visit_begin(node); end

  # source://rufo//lib/rufo/formatter.rb#1722
  def visit_begin_node(node); end

  # source://rufo//lib/rufo/formatter.rb#1730
  def visit_begin_or_end(node, keyword); end

  # source://rufo//lib/rufo/formatter.rb#1844
  def visit_binary(node); end

  # source://rufo//lib/rufo/formatter.rb#1419
  def visit_block_arguments(node); end

  # source://rufo//lib/rufo/formatter.rb#1560
  def visit_bodystmt(node); end

  # source://rufo//lib/rufo/formatter.rb#1337
  def visit_brace_block(node); end

  # source://rufo//lib/rufo/formatter.rb#2547
  def visit_break(node); end

  # source://rufo//lib/rufo/formatter.rb#1467
  def visit_call_args(node); end

  # source://rufo//lib/rufo/formatter.rb#1062
  def visit_call_at_paren(node, args); end

  # source://rufo//lib/rufo/formatter.rb#1320
  def visit_call_with_block(node); end

  # source://rufo//lib/rufo/formatter.rb#977
  def visit_call_with_receiver(node); end

  # source://rufo//lib/rufo/formatter.rb#1033
  def visit_call_without_receiver(node); end

  # source://rufo//lib/rufo/formatter.rb#2921
  def visit_case(node); end

  # source://rufo//lib/rufo/formatter.rb#1904
  def visit_class(node); end

  # source://rufo//lib/rufo/formatter.rb#1755
  def visit_comma_separated_list(nodes, needs_indent: T.unsafe(nil), base_column: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#1153
  def visit_command(node); end

  # source://rufo//lib/rufo/formatter.rb#1248
  def visit_command_args(args, base_column); end

  # source://rufo//lib/rufo/formatter.rb#1198
  def visit_command_call(node); end

  # source://rufo//lib/rufo/formatter.rb#1169
  def visit_command_end(node, args, base_column); end

  # source://rufo//lib/rufo/formatter.rb#3144
  def visit_constant_pattern(node); end

  # source://rufo//lib/rufo/formatter.rb#2562
  def visit_control_keyword(node, keyword); end

  # source://rufo//lib/rufo/formatter.rb#1948
  def visit_def(node); end

  # source://rufo//lib/rufo/formatter.rb#1999
  def visit_def_from_name(name, params, body); end

  # source://rufo//lib/rufo/formatter.rb#1976
  def visit_def_with_receiver(node); end

  # source://rufo//lib/rufo/formatter.rb#2660
  def visit_defined(node); end

  # source://rufo//lib/rufo/formatter.rb#1389
  def visit_do_block(node); end

  # source://rufo//lib/rufo/formatter.rb#1726
  def visit_end_node(node); end

  # source://rufo//lib/rufo/formatter.rb#489
  def visit_exps(exps, with_indent: T.unsafe(nil), with_lines: T.unsafe(nil), want_trailing_multiline: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#3168
  def visit_find_pattern(node); end

  # source://rufo//lib/rufo/formatter.rb#1692
  def visit_for(node); end

  # source://rufo//lib/rufo/formatter.rb#2325
  def visit_hash(node); end

  # source://rufo//lib/rufo/formatter.rb#2361
  def visit_hash_key_value(node); end

  # source://rufo//lib/rufo/formatter.rb#3214
  def visit_hash_pattern(node); end

  # source://rufo//lib/rufo/formatter.rb#2849
  def visit_if(node); end

  # source://rufo//lib/rufo/formatter.rb#2857
  def visit_if_or_unless(node, keyword, check_end: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#1800
  def visit_kwrest_param(node); end

  # source://rufo//lib/rufo/formatter.rb#2576
  def visit_lambda(node); end

  # source://rufo//lib/rufo/formatter.rb#2711
  def visit_literal_elements(elements, token_column:, inside_hash: T.unsafe(nil), inside_array: T.unsafe(nil), keep_final_newline: T.unsafe(nil), &block); end

  # source://rufo//lib/rufo/formatter.rb#1640
  def visit_mlhs(node); end

  # source://rufo//lib/rufo/formatter.rb#1931
  def visit_module(node); end

  # source://rufo//lib/rufo/formatter.rb#1676
  def visit_mrhs_add_star(node); end

  # source://rufo//lib/rufo/formatter.rb#1626
  def visit_mrhs_new_from_args(node); end

  # source://rufo//lib/rufo/formatter.rb#860
  def visit_multiple_assign(node); end

  # source://rufo//lib/rufo/formatter.rb#2552
  def visit_next(node); end

  # source://rufo//lib/rufo/formatter.rb#833
  def visit_op_assign(node); end

  # source://rufo//lib/rufo/formatter.rb#2093
  def visit_params(node); end

  # source://rufo//lib/rufo/formatter.rb#2074
  def visit_paren(node); end

  # source://rufo//lib/rufo/formatter.rb#799
  def visit_path(node); end

  # source://rufo//lib/rufo/formatter.rb#2228
  def visit_q_or_i_array(node); end

  # source://rufo//lib/rufo/formatter.rb#781
  def visit_quoted_symbol_literal(node); end

  # source://rufo//lib/rufo/formatter.rb#2404
  def visit_range(node, inclusive); end

  # source://rufo//lib/rufo/formatter.rb#2415
  def visit_regexp_literal(node); end

  # source://rufo//lib/rufo/formatter.rb#1622
  def visit_rescue_types(node); end

  # source://rufo//lib/rufo/formatter.rb#1787
  def visit_rest_param(node); end

  # source://rufo//lib/rufo/formatter.rb#2542
  def visit_return(node); end

  # source://rufo//lib/rufo/formatter.rb#2494
  def visit_sclass(node); end

  # source://rufo//lib/rufo/formatter.rb#2512
  def visit_setter(node); end

  # source://rufo//lib/rufo/formatter.rb#2391
  def visit_splat_inside_hash(node); end

  # source://rufo//lib/rufo/formatter.rb#711
  def visit_string_concat(node); end

  # source://rufo//lib/rufo/formatter.rb#756
  def visit_string_dvar(node); end

  # source://rufo//lib/rufo/formatter.rb#744
  def visit_string_interpolation(node); end

  # source://rufo//lib/rufo/formatter.rb#580
  def visit_string_literal(node); end

  # source://rufo//lib/rufo/formatter.rb#682
  def visit_string_literal_end(node); end

  # source://rufo//lib/rufo/formatter.rb#958
  def visit_suffix(node, suffix); end

  # source://rufo//lib/rufo/formatter.rb#2644
  def visit_super(node); end

  # source://rufo//lib/rufo/formatter.rb#773
  def visit_symbol(node); end

  # source://rufo//lib/rufo/formatter.rb#762
  def visit_symbol_literal(node); end

  # source://rufo//lib/rufo/formatter.rb#941
  def visit_ternary_if(node); end

  # source://rufo//lib/rufo/formatter.rb#1811
  def visit_unary(node); end

  # source://rufo//lib/rufo/formatter.rb#2702
  def visit_undef(node); end

  # source://rufo//lib/rufo/formatter.rb#2853
  def visit_unless(node); end

  # source://rufo//lib/rufo/formatter.rb#2900
  def visit_until(node); end

  # source://rufo//lib/rufo/formatter.rb#2950
  def visit_when(node); end

  # source://rufo//lib/rufo/formatter.rb#2895
  def visit_while(node); end

  # source://rufo//lib/rufo/formatter.rb#2905
  def visit_while_or_until(node, keyword); end

  # source://rufo//lib/rufo/formatter.rb#2557
  def visit_yield(node); end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/formatter.rb#3926
  def void_exps?(node); end

  # Every line between the first line and end line of this string (excluding the
  # first line) must remain like it is now (we don't want to mess with that when
  # indenting/dedenting)
  #
  # This can happen with heredocs, but also with string literals spanning
  # multiple lines.
  #
  # source://rufo//lib/rufo/formatter.rb#674
  def with_unmodifiable_string_lines; end

  # source://rufo//lib/rufo/formatter.rb#3782
  def write(value); end

  # source://rufo//lib/rufo/formatter.rb#3821
  def write_indent(indent = T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#3814
  def write_line; end

  # source://rufo//lib/rufo/formatter.rb#2189
  def write_params_comma(with_indent: T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#3789
  def write_space(value = T.unsafe(nil)); end

  # source://rufo//lib/rufo/formatter.rb#3794
  def write_space_using_setting(first_space, setting, at_least_one: T.unsafe(nil)); end

  class << self
    # source://rufo//lib/rufo/formatter.rb#10
    def format(code, **options); end
  end
end

# source://rufo//lib/rufo/formatter.rb#8
Rufo::Formatter::EMPTY_HASH = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/formatter.rb#7
Rufo::Formatter::EMPTY_STRING = T.let(T.unsafe(nil), Array)

# source://rufo//lib/rufo/formatter.rb#6
Rufo::Formatter::INDENT_SIZE = T.let(T.unsafe(nil), Integer)

# source://rufo//lib/rufo/logger.rb#2
class Rufo::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://rufo//lib/rufo/logger.rb#11
  def initialize(level); end

  # source://rufo//lib/rufo/logger.rb#15
  def debug(*args); end

  # source://rufo//lib/rufo/logger.rb#27
  def error(*args); end

  # source://rufo//lib/rufo/logger.rb#19
  def log(*args); end

  # source://rufo//lib/rufo/logger.rb#23
  def warn(*args); end

  private

  # Returns the value of attribute level.
  #
  # source://rufo//lib/rufo/logger.rb#33
  def level; end

  # @return [Boolean]
  #
  # source://rufo//lib/rufo/logger.rb#35
  def should_output?(level_to_check); end
end

# source://rufo//lib/rufo/logger.rb#3
Rufo::Logger::LEVELS = T.let(T.unsafe(nil), Hash)

# source://rufo//lib/rufo/parser.rb#5
class Rufo::Parser < ::Ripper
  # @raise [::Rufo::SyntaxError]
  #
  # source://rufo//lib/rufo/parser.rb#6
  def compile_error(msg); end

  # @raise [::Rufo::SyntaxError]
  #
  # source://rufo//lib/rufo/parser.rb#10
  def on_parse_error(msg); end
end

# source://rufo//lib/rufo/settings.rb#1
module Rufo::Settings
  # source://rufo//lib/rufo/settings.rb#12
  def align_case_when; end

  # source://rufo//lib/rufo/settings.rb#12
  def align_case_when=(_arg0); end

  # source://rufo//lib/rufo/settings.rb#12
  def align_chained_calls; end

  # source://rufo//lib/rufo/settings.rb#12
  def align_chained_calls=(_arg0); end

  # source://rufo//lib/rufo/settings.rb#12
  def excludes; end

  # source://rufo//lib/rufo/settings.rb#12
  def excludes=(_arg0); end

  # source://rufo//lib/rufo/settings.rb#12
  def includes; end

  # source://rufo//lib/rufo/settings.rb#12
  def includes=(_arg0); end

  # source://rufo//lib/rufo/settings.rb#14
  def init_settings(options); end

  # source://rufo//lib/rufo/settings.rb#12
  def parens_in_def; end

  # source://rufo//lib/rufo/settings.rb#12
  def parens_in_def=(_arg0); end

  # source://rufo//lib/rufo/settings.rb#12
  def quote_style; end

  # source://rufo//lib/rufo/settings.rb#12
  def quote_style=(_arg0); end

  # source://rufo//lib/rufo/settings.rb#12
  def trailing_commas; end

  # source://rufo//lib/rufo/settings.rb#12
  def trailing_commas=(_arg0); end
end

# source://rufo//lib/rufo/settings.rb#2
Rufo::Settings::OPTIONS = T.let(T.unsafe(nil), Hash)

# source://rufo//lib/rufo.rb#7
class Rufo::SyntaxError < ::StandardError
  # @return [SyntaxError] a new instance of SyntaxError
  #
  # source://rufo//lib/rufo.rb#10
  def initialize(message, lineno); end

  # Returns the value of attribute lineno.
  #
  # source://rufo//lib/rufo.rb#8
  def lineno; end
end

# source://rufo//lib/rufo.rb#5
class Rufo::UnknownSyntaxError < ::StandardError; end

# source://rufo//lib/rufo/version.rb#4
Rufo::VERSION = T.let(T.unsafe(nil), String)
